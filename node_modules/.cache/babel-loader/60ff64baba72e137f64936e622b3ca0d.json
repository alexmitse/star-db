{"ast":null,"code":"import _slicedToArray from \"/home/amitsevich/STAR-DB/star-db/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/amitsevich/STAR-DB/star-db/src/components/search-item-list/search-item-list.jsx\";\n\n/* eslint-disable import/no-extraneous-dependencies */\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './search-item-list.css';\nimport SwapiService from '../../services/swapi-service';\nimport SearchList from '../search-list';\nimport PaginationSearch from '../pagination-search';\nimport Spinner from '../spinner';\nexport default function SearchItemList() {\n  const _useParams = useParams(),\n        str = _useParams.str;\n\n  const swapiService = new SwapiService();\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        term = _useState2[0],\n        setTerm = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        list = _useState4[0],\n        setList = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        count = _useState6[0],\n        setCount = _useState6[1];\n\n  const _useState7 = useState(1),\n        _useState8 = _slicedToArray(_useState7, 2),\n        currentElement = _useState8[0],\n        setCurrentElement = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 1),\n        display = _useState10[0];\n\n  let searchItem;\n\n  const onTermChange = e => {\n    if (typeof e === 'string') {\n      searchItem = e;\n      setTerm(searchItem);\n    } else {\n      searchItem = e.target.value;\n      setTerm(e.target.value);\n    }\n\n    if (searchItem.length > 1) swapiService.getElement(searchItem).then(listFromServer => {\n      setCount(listFromServer.length);\n      setList(listFromServer);\n    });\n  };\n\n  useEffect(() => {\n    onTermChange(str);\n  }, [str]);\n  if (!list) return React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    value: term,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), list && React.createElement(SearchList, {\n    list: list,\n    propTerm: term,\n    display: display,\n    currentPage: currentElement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), list && React.createElement(PaginationSearch, {\n    totalCount: count,\n    currentPage: currentElement,\n    setCurrentPage: setCurrentElement,\n    name: list,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/amitsevich/STAR-DB/star-db/src/components/search-item-list/search-item-list.jsx"],"names":["React","useState","useEffect","useParams","SwapiService","SearchList","PaginationSearch","Spinner","SearchItemList","str","swapiService","term","setTerm","list","setList","count","setCount","currentElement","setCurrentElement","display","searchItem","onTermChange","e","target","value","length","getElement","then","listFromServer"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAO,wBAAP;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,eAAe,SAASC,cAAT,GAA0B;AAAA,qBACvBL,SAAS,EADc;AAAA,QAC/BM,GAD+B,cAC/BA,GAD+B;;AAEvC,QAAMC,YAAY,GAAG,IAAIN,YAAJ,EAArB;;AAFuC,oBAGfH,QAAQ,CAAC,IAAD,CAHO;AAAA;AAAA,QAGhCU,IAHgC;AAAA,QAG1BC,OAH0B;;AAAA,qBAIfX,QAAQ,CAAC,IAAD,CAJO;AAAA;AAAA,QAIhCY,IAJgC;AAAA,QAI1BC,OAJ0B;;AAAA,qBAKbb,QAAQ,CAAC,IAAD,CALK;AAAA;AAAA,QAKhCc,KALgC;AAAA,QAKzBC,QALyB;;AAAA,qBAMKf,QAAQ,CAAC,CAAD,CANb;AAAA;AAAA,QAMhCgB,cANgC;AAAA,QAMhBC,iBANgB;;AAAA,qBAOrBjB,QAAQ,CAAC,KAAD,CAPa;AAAA;AAAA,QAOhCkB,OAPgC;;AAQvC,MAAIC,UAAJ;;AAEA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAC1B,QAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AACzBF,MAAAA,UAAU,GAAGE,CAAb;AACAV,MAAAA,OAAO,CAACQ,UAAD,CAAP;AACD,KAHD,MAGO;AACLA,MAAAA,UAAU,GAAGE,CAAC,CAACC,MAAF,CAASC,KAAtB;AACAZ,MAAAA,OAAO,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACD;;AAED,QAAIJ,UAAU,CAACK,MAAX,GAAoB,CAAxB,EACEf,YAAY,CAACgB,UAAb,CAAwBN,UAAxB,EAAoCO,IAApC,CAA0CC,cAAD,IAAoB;AAC3DZ,MAAAA,QAAQ,CAACY,cAAc,CAACH,MAAhB,CAAR;AACAX,MAAAA,OAAO,CAACc,cAAD,CAAP;AACD,KAHD;AAIH,GAdD;;AAgBA1B,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,YAAY,CAACZ,GAAD,CAAZ;AACD,GAFQ,EAEN,CAACA,GAAD,CAFM,CAAT;AAIA,MAAI,CAACI,IAAL,EAAW,OAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEX,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEF,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGE,IAAI,IACH,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEA,IADR;AAEE,IAAA,QAAQ,EAAEF,IAFZ;AAGE,IAAA,OAAO,EAAEQ,OAHX;AAIE,IAAA,WAAW,EAAEF,cAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAUGJ,IAAI,IACH,oBAAC,gBAAD;AACE,IAAA,UAAU,EAAEE,KADd;AAEE,IAAA,WAAW,EAAEE,cAFf;AAGE,IAAA,cAAc,EAAEC,iBAHlB;AAIE,IAAA,IAAI,EAAEL,IAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADF;AAqBD","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './search-item-list.css';\nimport SwapiService from '../../services/swapi-service';\nimport SearchList from '../search-list';\nimport PaginationSearch from '../pagination-search';\nimport Spinner from '../spinner';\n\nexport default function SearchItemList() {\n  const { str } = useParams();\n  const swapiService = new SwapiService();\n  const [term, setTerm] = useState(null);\n  const [list, setList] = useState(null);\n  const [count, setCount] = useState(null);\n  const [currentElement, setCurrentElement] = useState(1);\n  const [display] = useState(false);\n  let searchItem;\n\n  const onTermChange = (e) => {\n    if (typeof e === 'string') {\n      searchItem = e;\n      setTerm(searchItem);\n    } else {\n      searchItem = e.target.value;\n      setTerm(e.target.value);\n    }\n\n    if (searchItem.length > 1)\n      swapiService.getElement(searchItem).then((listFromServer) => {\n        setCount(listFromServer.length);\n        setList(listFromServer);\n      });\n  };\n\n  useEffect(() => {\n    onTermChange(str);\n  }, [str]);\n\n  if (!list) return <Spinner />;\n\n  return (\n    <div>\n      <input type=\"text\" value={term} />\n      {list && (\n        <SearchList\n          list={list}\n          propTerm={term}\n          display={display}\n          currentPage={currentElement}\n        />\n      )}\n      {list && (\n        <PaginationSearch\n          totalCount={count}\n          currentPage={currentElement}\n          setCurrentPage={setCurrentElement}\n          name={list}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}