{"ast":null,"code":"import _slicedToArray from\"/home/amitsevich/STAR-DB/star-db/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable import/no-extraneous-dependencies */import React,{useState,useEffect}from'react';import{useLocation,useHistory}from'react-router-dom';import quetyString from'query-string';import'./search-item-list.scss';import SwapiService from'../../services/swapi-service';import SearchList from'../search-list';import PaginationSearch from'../pagination-search';import Spinner from'../spinner';export default function SearchItemList(){var location=useLocation();var swapiService=new SwapiService();var _useState=useState(null),_useState2=_slicedToArray(_useState,2),term=_useState2[0],setTerm=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),list=_useState4[0],setList=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),count=_useState6[0],setCount=_useState6[1];var _useState7=useState(1),_useState8=_slicedToArray(_useState7,2),currentElement=_useState8[0],setCurrentElement=_useState8[1];var history=useHistory();var parsedQuery=quetyString.parse(location.search);var onHandleSubmit=function onHandleSubmit(event){if(event!==undefined){setTimeout(function(){swapiService.getElement(term,parsedQuery.page).then(function(_ref){var _ref2=_slicedToArray(_ref,2),listFromServer=_ref2[0],countFromServer=_ref2[1];setCount(countFromServer);setList(listFromServer);history.push(\"/search?page=\".concat(currentElement,\"&search=\").concat(term));});},2000);event.preventDefault();}else{setTimeout(function(){swapiService.getElement(parsedQuery.search,parsedQuery.page).then(function(_ref3){var _ref4=_slicedToArray(_ref3,2),listFromServer=_ref4[0],countFromServer=_ref4[1];setCount(countFromServer);setList(listFromServer);});},2000);}};var onTermChange=function onTermChange(e){setTerm(e.target.value);};useEffect(function(){setTerm(parsedQuery.search);onHandleSubmit();},[]);var onChangeCurrentElement=function onChangeCurrentElement(element){swapiService.getElement(term,\"\".concat(element)).then(function(_ref5){var _ref6=_slicedToArray(_ref5,1),listFromServer=_ref6[0];setList(listFromServer);setCurrentElement(element);});};if(!list)return React.createElement(Spinner,null);return React.createElement(\"div\",{className:\"component-search-container\"},React.createElement(\"form\",{onSubmit:onHandleSubmit,className:\"container-search-component container-search\"},React.createElement(\"input\",{type:\"text\",onInput:onTermChange,className:\"search-input\"}),React.createElement(\"input\",{type:\"submit\",value:\"\",className:\"search-submit\"})),list&&React.createElement(SearchList,{list:list,propTerm:term,display:false}),list&&React.createElement(PaginationSearch,{totalCount:count,currentPage:currentElement,setCurrentPage:onChangeCurrentElement,name:term===null?parsedQuery.search:term,size:10}));}","map":{"version":3,"sources":["/home/amitsevich/STAR-DB/star-db/src/components/search-item-list/search-item-list.jsx"],"names":["React","useState","useEffect","useLocation","useHistory","quetyString","SwapiService","SearchList","PaginationSearch","Spinner","SearchItemList","location","swapiService","term","setTerm","list","setList","count","setCount","currentElement","setCurrentElement","history","parsedQuery","parse","search","onHandleSubmit","event","undefined","setTimeout","getElement","page","then","listFromServer","countFromServer","push","preventDefault","onTermChange","e","target","value","onChangeCurrentElement","element"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport quetyString from 'query-string';\nimport './search-item-list.scss';\nimport SwapiService from '../../services/swapi-service';\nimport SearchList from '../search-list';\nimport PaginationSearch from '../pagination-search';\nimport Spinner from '../spinner';\n\nexport default function SearchItemList() {\n  const location = useLocation();\n  const swapiService = new SwapiService();\n  const [term, setTerm] = useState(null);\n  const [list, setList] = useState(null);\n  const [count, setCount] = useState(null);\n  const [currentElement, setCurrentElement] = useState(1);\n  const history = useHistory();\n  const parsedQuery = quetyString.parse(location.search);\n\n  const onHandleSubmit = (event) => {\n    if (event !== undefined) {\n      setTimeout(() => {\n        swapiService\n          .getElement(term, parsedQuery.page)\n          .then(([listFromServer, countFromServer]) => {\n            setCount(countFromServer);\n            setList(listFromServer);\n            history.push(`/search?page=${currentElement}&search=${term}`);\n          });\n      }, 2000);\n      event.preventDefault();\n    } else {\n      setTimeout(() => {\n        swapiService\n          .getElement(parsedQuery.search, parsedQuery.page)\n          .then(([listFromServer, countFromServer]) => {\n            setCount(countFromServer);\n            setList(listFromServer);\n          });\n      }, 2000);\n    }\n  };\n  const onTermChange = (e) => {\n    setTerm(e.target.value);\n  };\n  useEffect(() => {\n    setTerm(parsedQuery.search);\n    onHandleSubmit();\n  }, []);\n\n  const onChangeCurrentElement = (element) => {\n    swapiService.getElement(term, `${element}`).then(([listFromServer]) => {\n      setList(listFromServer);\n      setCurrentElement(element);\n    });\n  };\n\n  if (!list) return <Spinner />;\n\n  return (\n    <div className=\"component-search-container\">\n      <form\n        onSubmit={onHandleSubmit}\n        className=\"container-search-component container-search\"\n      >\n        <input type=\"text\" onInput={onTermChange} className=\"search-input\" />\n        <input type=\"submit\" value=\"\" className=\"search-submit\" />\n      </form>\n      {list && <SearchList list={list} propTerm={term} display={false} />}\n      {list && (\n        <PaginationSearch\n          totalCount={count}\n          currentPage={currentElement}\n          setCurrentPage={onChangeCurrentElement}\n          name={term === null ? parsedQuery.search : term}\n          size={10}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}