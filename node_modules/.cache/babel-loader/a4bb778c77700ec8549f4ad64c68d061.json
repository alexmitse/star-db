{"ast":null,"code":"/* eslint-disable no-await-in-loop */\n\n/* eslint-disable class-methods-use-this */\nexport default class SwapiService {\n  constructor() {\n    this.apiBase = 'http://localhost:3000';\n\n    this.transformSearch = search => {\n      return {\n        id: search.id,\n        name: search.name\n      };\n    };\n\n    this.transformPlanet = planet => {\n      return {\n        id: planet.id,\n        lable: 'planets',\n        name: planet.name,\n        climate: planet.climate,\n        population: planet.population,\n        people: planet.people,\n        films: planet.films\n      };\n    };\n\n    this.transformStarship = starship => {\n      return {\n        id: starship.id,\n        lable: 'starships',\n        name: starship.name,\n        model: starship.model,\n        length: starship.length,\n        people: starship.people,\n        films: starship.films\n      };\n    };\n\n    this.transformPerson = person => {\n      return {\n        id: person.id,\n        lable: 'people',\n        name: person.name,\n        gender: person.gender,\n        homeworld: person.planet,\n        films: person.films,\n        species: person.species,\n        vehicles: person.vehicles,\n        starships: person.starships\n      };\n    };\n\n    this.transformFilm = film => {\n      return {\n        id: film.id,\n        lable: 'films',\n        name: film.title,\n        director: film.director,\n        people: film.people,\n        species: film.species,\n        starships: film.starships,\n        vehicles: film.vehicles,\n        planets: film.planets\n      };\n    };\n\n    this.transformSpecies = species => {\n      return {\n        id: species.id,\n        lable: 'species',\n        name: species.name,\n        classification: species.classification,\n        language: species.language,\n        films: species.films,\n        people: species.people\n      };\n    };\n\n    this.transformVehicles = vehicles => {\n      return {\n        id: vehicles.id,\n        lable: 'vehicles',\n        name: vehicles.name,\n        model: vehicles.model,\n        length: vehicles.length,\n        films: vehicles.films,\n        people: vehicles.people\n      };\n    };\n  }\n\n  async getResource(url) {\n    const res = await fetch(`${this.apiBase}${url}`);\n\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url} , received ${res.status}`);\n    }\n\n    const resJson = await res.json();\n    return resJson;\n  }\n\n  async getAllPeople(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/people/?page=${number}`);\n    return [res.rows.map(this.transformPerson), res.count];\n  }\n\n  async getPerson(id) {\n    const person = await this.getResource(`/people/${id}/`);\n    return this.transformPerson(person[0]);\n  }\n\n  async getAllPlanets(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/planets/?page=${number}`);\n    return [res.rows.map(this.transformPlanet), res.count];\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this.transformPlanet(planet[0]);\n  }\n\n  async getAllStarships(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/starships/?page=${number}`);\n    return [res.rows.map(this.transformStarship), res.count];\n  }\n\n  async getStarship(id) {\n    const starship = await this.getResource(`/starships/${id}`);\n    return this.transformStarship(starship[0]);\n  }\n\n  async getAllFilms(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/films/?page=${number}`);\n    return [res.rows.map(this.transformFilm), res.count];\n  }\n\n  async getFilm(id) {\n    const film = await this.getResource(`/films/${id}`);\n    return this.transformFilm(film[0]);\n  }\n\n  async getAllSpecies(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/species/?page=${number}`);\n    return [res.rows.map(this.transformSpecies), res.count];\n  }\n\n  async getSpecies(id) {\n    const species = await this.getResource(`/species/${id}`);\n    return this.transformSpecies(species[0]);\n  }\n\n  async getAllVehicles(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/vehicles/?page=${number}`);\n    return [res.rows.map(this.transformSpecies), res.count];\n  }\n\n  async getVehicles(id) {\n    const vehicles = await this.getResource(`/vehicles/${id}`);\n    return this.transformVehicles(vehicles[0]);\n  }\n\n  async getElement(str) {\n    const res = await this.getResource(`/search?search=${str}`);\n    let result = null;\n    let count = null;\n\n    if (str !== '') {\n      result = await res.map(item => {\n        if (Array.isArray(item) && item !== null) if (item.length !== 0) {\n          return item.map(this.transformSearch);\n        }\n        return null;\n      }); // count = await res.map((item))\n    }\n\n    return result;\n  }\n\n}","map":{"version":3,"sources":["/home/amitsevich/STAR-DB/star-db/src/services/swapi-service.js"],"names":["SwapiService","apiBase","transformSearch","search","id","name","transformPlanet","planet","lable","climate","population","people","films","transformStarship","starship","model","length","transformPerson","person","gender","homeworld","species","vehicles","starships","transformFilm","film","title","director","planets","transformSpecies","classification","language","transformVehicles","getResource","url","res","fetch","ok","Error","status","resJson","json","getAllPeople","number","filter","rows","map","count","getPerson","getAllPlanets","getPlanet","getAllStarships","getStarship","getAllFilms","getFilm","getAllSpecies","getSpecies","getAllVehicles","getVehicles","getElement","str","result","item","Array","isArray"],"mappings":"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","sourcesContent":["/* eslint-disable no-await-in-loop */\n/* eslint-disable class-methods-use-this */\nexport default class SwapiService {\n  apiBase = 'http://localhost:3000';\n\n  async getResource(url) {\n    const res = await fetch(`${this.apiBase}${url}`);\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url} , received ${res.status}`);\n    }\n    const resJson = await res.json();\n    return resJson;\n  }\n\n  async getAllPeople(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/people/?page=${number}`);\n    return [res.rows.map(this.transformPerson), res.count];\n  }\n\n  async getPerson(id) {\n    const person = await this.getResource(`/people/${id}/`);\n    return this.transformPerson(person[0]);\n  }\n\n  async getAllPlanets(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/planets/?page=${number}`);\n    return [res.rows.map(this.transformPlanet), res.count];\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this.transformPlanet(planet[0]);\n  }\n\n  async getAllStarships(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/starships/?page=${number}`);\n    return [res.rows.map(this.transformStarship), res.count];\n  }\n\n  async getStarship(id) {\n    const starship = await this.getResource(`/starships/${id}`);\n    return this.transformStarship(starship[0]);\n  }\n\n  async getAllFilms(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/films/?page=${number}`);\n    return [res.rows.map(this.transformFilm), res.count];\n  }\n\n  async getFilm(id) {\n    const film = await this.getResource(`/films/${id}`);\n    return this.transformFilm(film[0]);\n  }\n\n  async getAllSpecies(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/species/?page=${number}`);\n    return [res.rows.map(this.transformSpecies), res.count];\n  }\n\n  async getSpecies(id) {\n    const species = await this.getResource(`/species/${id}`);\n    return this.transformSpecies(species[0]);\n  }\n\n  async getAllVehicles(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/vehicles/?page=${number}`);\n    return [res.rows.map(this.transformSpecies), res.count];\n  }\n\n  async getVehicles(id) {\n    const vehicles = await this.getResource(`/vehicles/${id}`);\n    return this.transformVehicles(vehicles[0]);\n  }\n\n  async getElement(str) {\n    const res = await this.getResource(`/search?search=${str}`);\n    let result = null;\n    let count = null;\n    if (str !== '') {\n      result = await res.map((item) => {\n        if (Array.isArray(item) && item !== null)\n          if (item.length !== 0) {\n            return item.map(this.transformSearch);\n          }\n        return null;\n      });\n      // count = await res.map((item))\n    }\n    return result;\n  }\n\n  transformSearch = (search) => {\n    return {\n      id: search.id,\n      name: search.name,\n    };\n  };\n\n  transformPlanet = (planet) => {\n    return {\n      id: planet.id,\n      lable: 'planets',\n      name: planet.name,\n      climate: planet.climate,\n      population: planet.population,\n      people: planet.people,\n      films: planet.films,\n    };\n  };\n\n  transformStarship = (starship) => {\n    return {\n      id: starship.id,\n      lable: 'starships',\n      name: starship.name,\n      model: starship.model,\n      length: starship.length,\n      people: starship.people,\n      films: starship.films,\n    };\n  };\n\n  transformPerson = (person) => {\n    return {\n      id: person.id,\n      lable: 'people',\n      name: person.name,\n      gender: person.gender,\n      homeworld: person.planet,\n      films: person.films,\n      species: person.species,\n      vehicles: person.vehicles,\n      starships: person.starships,\n    };\n  };\n\n  transformFilm = (film) => {\n    return {\n      id: film.id,\n      lable: 'films',\n      name: film.title,\n      director: film.director,\n      people: film.people,\n      species: film.species,\n      starships: film.starships,\n      vehicles: film.vehicles,\n      planets: film.planets,\n    };\n  };\n\n  transformSpecies = (species) => {\n    return {\n      id: species.id,\n      lable: 'species',\n      name: species.name,\n      classification: species.classification,\n      language: species.language,\n      films: species.films,\n      people: species.people,\n    };\n  };\n\n  transformVehicles = (vehicles) => {\n    return {\n      id: vehicles.id,\n      lable: 'vehicles',\n      name: vehicles.name,\n      model: vehicles.model,\n      length: vehicles.length,\n      films: vehicles.films,\n      people: vehicles.people,\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}