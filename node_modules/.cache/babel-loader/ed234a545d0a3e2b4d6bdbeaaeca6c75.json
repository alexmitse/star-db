{"ast":null,"code":"import _slicedToArray from \"/home/amitsevich/STAR-DB/star-db/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/amitsevich/STAR-DB/star-db/src/components/search-item-list/search-item-list.jsx\";\n\n/* eslint-disable import/no-extraneous-dependencies */\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport quetyString from 'query-string';\nimport './search-item-list.css';\nimport SwapiService from '../../services/swapi-service';\nimport SearchList from '../search-list';\nimport PaginationSearch from '../pagination-search';\nimport Spinner from '../spinner';\nexport default function SearchItemList() {\n  const location = useLocation();\n  const swapiService = new SwapiService();\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        term = _useState2[0],\n        setTerm = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        list = _useState4[0],\n        setList = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        count = _useState6[0],\n        setCount = _useState6[1];\n\n  const _useState7 = useState(1),\n        _useState8 = _slicedToArray(_useState7, 2),\n        currentElement = _useState8[0],\n        setCurrentElement = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        display = _useState10[0],\n        setDisplay = _useState10[1];\n\n  const history = useHistory();\n  const parsedQuery = quetyString.parse(location.search);\n\n  const onHandleSubmit = event => {\n    if (event !== undefined) {\n      setTimeout(() => {\n        swapiService.getElement(term, parsedQuery.page).then(([listFromServer, countFromServer]) => {\n          setCount(countFromServer);\n          setList(listFromServer);\n          history.push(`/search?page=${currentElement}&search=${term}`);\n        });\n      }, 2000);\n      event.preventDefault();\n    } else {\n      setTimeout(() => {\n        swapiService.getElement(parsedQuery.search, parsedQuery.page).then(([listFromServer, countFromServer]) => {\n          setCount(countFromServer);\n          setList(listFromServer);\n        });\n      }, 2000);\n    }\n  };\n\n  const onTermChange = e => {\n    if (e.target !== undefined) {\n      setTerm(e.target.value);\n\n      if (e.target.value !== '') {\n        setDisplay(true);\n        onHandleSubmit();\n      } else setDisplay(false);\n    }\n  };\n\n  useEffect(() => {\n    setTerm(parsedQuery.search);\n    onHandleSubmit();\n  }, []);\n\n  const onChangeCurrentElement = element => {\n    swapiService.getElement(term, `${element}`).then(([listFromServer]) => {\n      setList(listFromServer);\n      setCurrentElement(element);\n    });\n  };\n\n  if (!list) return React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: onHandleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    value: term,\n    onInput: onTermChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"go\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })), list && display && React.createElement(SearchList, {\n    list: list,\n    propTerm: term,\n    display: display // currentPage={currentElement}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), list && display && React.createElement(PaginationSearch, {\n    totalCount: count,\n    currentPage: currentElement,\n    setCurrentPage: onChangeCurrentElement,\n    name: term === null ? parsedQuery.search : term,\n    size: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/amitsevich/STAR-DB/star-db/src/components/search-item-list/search-item-list.jsx"],"names":["React","useState","useEffect","useLocation","useHistory","quetyString","SwapiService","SearchList","PaginationSearch","Spinner","SearchItemList","location","swapiService","term","setTerm","list","setList","count","setCount","currentElement","setCurrentElement","display","setDisplay","history","parsedQuery","parse","search","onHandleSubmit","event","undefined","setTimeout","getElement","page","then","listFromServer","countFromServer","push","preventDefault","onTermChange","e","target","value","onChangeCurrentElement","element"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport quetyString from 'query-string';\nimport './search-item-list.css';\nimport SwapiService from '../../services/swapi-service';\nimport SearchList from '../search-list';\nimport PaginationSearch from '../pagination-search';\nimport Spinner from '../spinner';\n\nexport default function SearchItemList() {\n  const location = useLocation();\n  const swapiService = new SwapiService();\n  const [term, setTerm] = useState(null);\n  const [list, setList] = useState(null);\n  const [count, setCount] = useState(null);\n  const [currentElement, setCurrentElement] = useState(1);\n  const [display, setDisplay] = useState(false);\n  const history = useHistory();\n  const parsedQuery = quetyString.parse(location.search);\n\n  const onHandleSubmit = (event) => {\n    if (event !== undefined) {\n      setTimeout(() => {\n        swapiService\n          .getElement(term, parsedQuery.page)\n          .then(([listFromServer, countFromServer]) => {\n            setCount(countFromServer);\n            setList(listFromServer);\n            history.push(`/search?page=${currentElement}&search=${term}`);\n          });\n      }, 2000);\n      event.preventDefault();\n    } else {\n      setTimeout(() => {\n        swapiService\n          .getElement(parsedQuery.search, parsedQuery.page)\n          .then(([listFromServer, countFromServer]) => {\n            setCount(countFromServer);\n            setList(listFromServer);\n          });\n      }, 2000);\n    }\n  };\n  const onTermChange = (e) => {\n    if (e.target !== undefined) {\n      setTerm(e.target.value);\n      if (e.target.value !== '') {\n        setDisplay(true);\n        onHandleSubmit();\n      } else setDisplay(false);\n    }\n  };\n  useEffect(() => {\n    setTerm(parsedQuery.search);\n    onHandleSubmit();\n  }, []);\n\n  const onChangeCurrentElement = (element) => {\n    swapiService.getElement(term, `${element}`).then(([listFromServer]) => {\n      setList(listFromServer);\n      setCurrentElement(element);\n    });\n  };\n\n  if (!list) return <Spinner />;\n\n  return (\n    <div>\n      <form onSubmit={onHandleSubmit}>\n        <input type=\"text\" value={term} onInput={onTermChange} />\n        <input type=\"submit\" value=\"go\" />\n      </form>\n      {list && display && (\n        <SearchList\n          list={list}\n          propTerm={term}\n          display={display}\n          // currentPage={currentElement}\n        />\n      )}\n      {list && display && (\n        <PaginationSearch\n          totalCount={count}\n          currentPage={currentElement}\n          setCurrentPage={onChangeCurrentElement}\n          name={term === null ? parsedQuery.search : term}\n          size={10}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}