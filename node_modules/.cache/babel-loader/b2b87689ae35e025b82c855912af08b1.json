{"ast":null,"code":"/* eslint-disable no-await-in-loop */\n\n/* eslint-disable class-methods-use-this */\nexport default class SwapiService {\n  constructor() {\n    this.apiBase = 'http://localhost:3000';\n\n    this.transformPlanet = planet => {\n      return {\n        id: planet.id,\n        lable: 'planets',\n        name: planet.name,\n        climate: planet.climate,\n        population: planet.population,\n        residents: planet.people,\n        films: planet.films\n      };\n    };\n\n    this.transformStarship = starship => {\n      return {\n        id: starship.id,\n        lable: 'starships',\n        name: starship.name,\n        model: starship.model,\n        length: starship.length,\n        pilot: starship.people,\n        films: starship.films\n      };\n    };\n\n    this.transformPerson = person => {\n      return {\n        id: person.id,\n        lable: 'people',\n        name: person.name,\n        gender: person.gender,\n        homeworld: person.planets,\n        // object\n        films: person.films,\n        species: person.species,\n        vehicles: person.vehicles,\n        starships: person.starships\n      };\n    };\n\n    this.transformFilm = film => {\n      return {\n        id: this.extractId(film),\n        lable: 'films',\n        name: film.title,\n        director: film.director,\n        people: film.people,\n        species: film.species,\n        starships: film.starships,\n        vehicles: film.vehicles\n      };\n    };\n\n    this.transformSpecies = species => {\n      return {\n        id: this.extractId(species),\n        lable: 'species',\n        name: species.name,\n        classification: species.classification,\n        designation: species.designation,\n        averageHeight: species.average_height\n      };\n    };\n\n    this.transformVehicles = vehicles => {\n      return {\n        id: this.extractId(vehicles),\n        lable: 'vehicles',\n        name: vehicles.name,\n        model: vehicles.model,\n        manufacturer: vehicles.manufacturer,\n        costInCredits: vehicles.cost_in_credits\n      };\n    };\n  }\n\n  async getRequest(url) {\n    const res = await fetch(`${url}`);\n    const resJson = await res.json();\n    return resJson;\n  }\n\n  async getResource(url) {\n    const res = await fetch(`${this.apiBase}${url}`);\n\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url} , received ${res.status}`);\n    }\n\n    const resJson = await res.json();\n    return resJson;\n  }\n\n  async getAllPeople(number, filter) {\n    // let res = {};\n    // if (filter) res = await this.getResource(`${filter}`);\n    // else res = await fetch(`http://localhost:3000/people?page=${number}`);\n    // const resJson = await res.json();\n    // return [resJson.rows.map(this.transformPerson), resJson.count];\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/people/?page=${number}`);\n    return [res.results.map(this.transformPerson), res.count];\n  }\n\n  async getPerson(id) {\n    const person = await this.getResource(`/people/${id}/`);\n    return this.transformPerson(person);\n  }\n\n  async getAllPlanets(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/planets/?page=${number}`);\n    return [res.results.map(this.transformPlanet), res.count];\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this.transformPlanet(planet);\n  }\n\n  async getAllStarships(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/starships/?page=${number}`);\n    return [res.results.map(this.transformStarship), res.count];\n  }\n\n  async getStarship(id) {\n    const starship = await this.getResource(`/starships/${id}`);\n    return this.transformStarship(starship);\n  }\n\n  async getAllFilms(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/films/?page=${number}`);\n    return [res.results.map(this.transformFilm), res.count];\n  }\n\n  async getFilm(id) {\n    const film = await this.getResource(`/films/${id}`);\n    return this.transformFilm(film);\n  }\n\n  async getAllSpecies(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/species/?page=${number}`);\n    return [res.results.map(this.transformSpecies), res.count];\n  }\n\n  async getSpecies(id) {\n    const species = await this.getResource(`/species/${id}`);\n    return this.transformSpecies(species);\n  }\n\n  async getAllVehicles(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/vehicles/?page=${number}`);\n    return [res.results.map(this.transformSpecies), res.count];\n  }\n\n  async getVehicles(id) {\n    const vehicles = await this.getResource(`/vehicles/${id}`);\n    return this.transformVehicles(vehicles);\n  }\n\n  async getElement(str) {\n    let number = 0;\n    let resPeople = {};\n    let resPlanets = {};\n    let resStarships = {};\n    let resVehicles = {};\n    let resSpecies = {};\n    let resFilms = {};\n\n    do {\n      number += 1;\n      resPeople = await this.getResource(`/people?page=${number}&search=${str}`);\n      resPlanets = await this.getResource(`/planets?page=${number}&search=${str}`);\n      resStarships = await this.getResource(`/starships?page=${number}&search=${str}`);\n      resVehicles = await this.getResource(`/vehicles?page=${number}&search=${str}`);\n      resSpecies = await this.getResource(`/species?page=${number}&search=${str}`);\n      resFilms = await this.getResource(`/films?page=${number}&search=${str}`);\n    } while (resPeople.next); // сделать while для некст пэйдж\n\n\n    return [[...resPeople.results.map(this.transformPerson), // ...resPeopleNext.results.map(this.transformPerson),\n    ...resPlanets.results.map(this.transformPlanet), ...resStarships.results.map(this.transformStarship), ...resVehicles.results.map(this.transformVehicles), ...resSpecies.results.map(this.transformSpecies), ...resFilms.results.map(this.transformFilm)]];\n  }\n\n}","map":{"version":3,"sources":["/home/amitsevich/STAR-DB/star-db/src/services/swapi-service.js"],"names":["SwapiService","apiBase","transformPlanet","planet","id","lable","name","climate","population","residents","people","films","transformStarship","starship","model","length","pilot","transformPerson","person","gender","homeworld","planets","species","vehicles","starships","transformFilm","film","extractId","title","director","transformSpecies","classification","designation","averageHeight","average_height","transformVehicles","manufacturer","costInCredits","cost_in_credits","getRequest","url","res","fetch","resJson","json","getResource","ok","Error","status","getAllPeople","number","filter","results","map","count","getPerson","getAllPlanets","getPlanet","getAllStarships","getStarship","getAllFilms","getFilm","getAllSpecies","getSpecies","getAllVehicles","getVehicles","getElement","str","resPeople","resPlanets","resStarships","resVehicles","resSpecies","resFilms","next"],"mappings":"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","sourcesContent":["/* eslint-disable no-await-in-loop */\n/* eslint-disable class-methods-use-this */\nexport default class SwapiService {\n  apiBase = 'http://localhost:3000';\n\n  async getRequest(url) {\n    const res = await fetch(`${url}`);\n    const resJson = await res.json();\n    return resJson;\n  }\n\n  async getResource(url) {\n    const res = await fetch(`${this.apiBase}${url}`);\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url} , received ${res.status}`);\n    }\n    const resJson = await res.json();\n    return resJson;\n  }\n\n  async getAllPeople(number, filter) {\n    // let res = {};\n    // if (filter) res = await this.getResource(`${filter}`);\n    // else res = await fetch(`http://localhost:3000/people?page=${number}`);\n    // const resJson = await res.json();\n    // return [resJson.rows.map(this.transformPerson), resJson.count];\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/people/?page=${number}`);\n    return [res.results.map(this.transformPerson), res.count];\n  }\n\n  async getPerson(id) {\n    const person = await this.getResource(`/people/${id}/`);\n    return this.transformPerson(person);\n  }\n\n  async getAllPlanets(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/planets/?page=${number}`);\n    return [res.results.map(this.transformPlanet), res.count];\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this.transformPlanet(planet);\n  }\n\n  async getAllStarships(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/starships/?page=${number}`);\n    return [res.results.map(this.transformStarship), res.count];\n  }\n\n  async getStarship(id) {\n    const starship = await this.getResource(`/starships/${id}`);\n    return this.transformStarship(starship);\n  }\n\n  async getAllFilms(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/films/?page=${number}`);\n    return [res.results.map(this.transformFilm), res.count];\n  }\n\n  async getFilm(id) {\n    const film = await this.getResource(`/films/${id}`);\n    return this.transformFilm(film);\n  }\n\n  async getAllSpecies(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/species/?page=${number}`);\n    return [res.results.map(this.transformSpecies), res.count];\n  }\n\n  async getSpecies(id) {\n    const species = await this.getResource(`/species/${id}`);\n    return this.transformSpecies(species);\n  }\n\n  async getAllVehicles(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/vehicles/?page=${number}`);\n    return [res.results.map(this.transformSpecies), res.count];\n  }\n\n  async getVehicles(id) {\n    const vehicles = await this.getResource(`/vehicles/${id}`);\n    return this.transformVehicles(vehicles);\n  }\n\n  async getElement(str) {\n    let number = 0;\n    let resPeople = {};\n    let resPlanets = {};\n    let resStarships = {};\n    let resVehicles = {};\n    let resSpecies = {};\n    let resFilms = {};\n\n    do {\n      number += 1;\n      resPeople = await this.getResource(\n        `/people?page=${number}&search=${str}`,\n      );\n      resPlanets = await this.getResource(\n        `/planets?page=${number}&search=${str}`,\n      );\n      resStarships = await this.getResource(\n        `/starships?page=${number}&search=${str}`,\n      );\n      resVehicles = await this.getResource(\n        `/vehicles?page=${number}&search=${str}`,\n      );\n      resSpecies = await this.getResource(\n        `/species?page=${number}&search=${str}`,\n      );\n      resFilms = await this.getResource(`/films?page=${number}&search=${str}`);\n    } while (resPeople.next);\n    // сделать while для некст пэйдж\n\n    return [\n      [\n        ...resPeople.results.map(this.transformPerson),\n        // ...resPeopleNext.results.map(this.transformPerson),\n        ...resPlanets.results.map(this.transformPlanet),\n        ...resStarships.results.map(this.transformStarship),\n        ...resVehicles.results.map(this.transformVehicles),\n        ...resSpecies.results.map(this.transformSpecies),\n        ...resFilms.results.map(this.transformFilm),\n      ],\n    ];\n  }\n\n  transformPlanet = (planet) => {\n    return {\n      id: planet.id,\n      lable: 'planets',\n      name: planet.name,\n      climate: planet.climate,\n      population: planet.population,\n      residents: planet.people,\n      films: planet.films,\n    };\n  };\n\n  transformStarship = (starship) => {\n    return {\n      id: starship.id,\n      lable: 'starships',\n      name: starship.name,\n      model: starship.model,\n      length: starship.length,\n      pilot: starship.people,\n      films: starship.films,\n    };\n  };\n\n  transformPerson = (person) => {\n    return {\n      id: person.id,\n      lable: 'people',\n      name: person.name,\n      gender: person.gender,\n      homeworld: person.planets, // object\n      films: person.films,\n      species: person.species,\n      vehicles: person.vehicles,\n      starships: person.starships,\n    };\n  };\n\n  transformFilm = (film) => {\n    return {\n      id: this.extractId(film),\n      lable: 'films',\n      name: film.title,\n      director: film.director,\n      people: film.people,\n      species: film.species,\n      starships: film.starships,\n      vehicles: film.vehicles,\n    };\n  };\n\n  transformSpecies = (species) => {\n    return {\n      id: this.extractId(species),\n      lable: 'species',\n      name: species.name,\n      classification: species.classification,\n      designation: species.designation,\n      averageHeight: species.average_height,\n    };\n  };\n\n  transformVehicles = (vehicles) => {\n    return {\n      id: this.extractId(vehicles),\n      lable: 'vehicles',\n      name: vehicles.name,\n      model: vehicles.model,\n      manufacturer: vehicles.manufacturer,\n      costInCredits: vehicles.cost_in_credits,\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}