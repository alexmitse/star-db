{"ast":null,"code":"var _jsxFileName = \"/home/amitsevich/STAR-DB/star-db/src/components/random-planet/random-planet.jsx\";\nimport React, { Component } from 'react';\nimport SwapiService from '../../services/swapi-service';\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../errorIndicator';\nimport './random-planet.css';\nexport default class RandomPlanet extends Component {\n  constructor(props) {\n    super(props);\n    this.swapiService = new SwapiService();\n\n    this.onPlanetLoaded = planet => {\n      this.setState({\n        planet,\n        loading: false,\n        error: false\n      });\n    };\n\n    this.onError = () => {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    };\n\n    this.updatePlanet = () => {\n      const id = Math.floor(Math.random() * 25) + 3;\n      this.swapiService.getPlanet(id).then(this.onPlanetLoaded).catch(this.onError);\n    };\n\n    this.state = {\n      planet: {},\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.updatePlanet();\n    this.interval = setInterval(this.updatePlanet, 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const _this$state = this.state,\n          planet = _this$state.planet,\n          loading = _this$state.loading,\n          error = _this$state.error;\n    const hasDate = !(loading || error); // const planets = { planet };\n\n    const spinner = loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }) : null;\n    const errorMessage = error ? React.createElement(ErrorIndicator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }) : null;\n    const content = hasDate ? React.createElement(PlanetView, {\n      planet: planet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }) : null;\n    return React.createElement(\"div\", {\n      className: \"random-planet jumbotron rounded\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, errorMessage, spinner, content);\n  }\n\n}\n\nconst PlanetView = prop => {\n  const planet = prop.planet;\n  const id = planet.id,\n        name = planet.name,\n        population = planet.population,\n        rotationPeriod = planet.rotationPeriod,\n        diameter = planet.diameter;\n  return React.createElement(React.Fragment, null, React.createElement(\"img\", {\n    className: \"planet-image\",\n    src: `https://starwars-visualguide.com/assets/img/planets/${id}.jpg`,\n    alt: \"i'm so sorry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"planet-information\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, name), React.createElement(\"ul\", {\n    className: \"list-group list-group-flush\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Population\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, population)), React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Rotation Period\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, rotationPeriod)), React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Diameter\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, diameter)))));\n};","map":{"version":3,"sources":["/home/amitsevich/STAR-DB/star-db/src/components/random-planet/random-planet.jsx"],"names":["React","Component","SwapiService","Spinner","ErrorIndicator","RandomPlanet","constructor","props","swapiService","onPlanetLoaded","planet","setState","loading","error","onError","updatePlanet","id","Math","floor","random","getPlanet","then","catch","state","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","hasDate","spinner","errorMessage","content","PlanetView","prop","name","population","rotationPeriod","diameter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport SwapiService from '../../services/swapi-service';\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../errorIndicator';\n\nimport './random-planet.css';\n\nexport default class RandomPlanet extends Component {\n  swapiService = new SwapiService();\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      planet: {},\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.updatePlanet();\n    this.interval = setInterval(this.updatePlanet, 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  onPlanetLoaded = (planet) => {\n    this.setState({\n      planet,\n      loading: false,\n      error: false,\n    });\n  };\n\n  onError = () => {\n    this.setState({\n      error: true,\n      loading: false,\n    });\n  };\n\n  updatePlanet = () => {\n    const id = Math.floor(Math.random() * 25) + 3;\n    this.swapiService\n      .getPlanet(id)\n      .then(this.onPlanetLoaded)\n      .catch(this.onError);\n  };\n\n  render() {\n    const { planet, loading, error } = this.state;\n\n    const hasDate = !(loading || error);\n    // const planets = { planet };\n    const spinner = loading ? <Spinner /> : null;\n    const errorMessage = error ? <ErrorIndicator /> : null;\n    const content = hasDate ? <PlanetView planet={planet} /> : null;\n\n    return (\n      <div className=\"random-planet jumbotron rounded\">\n        {errorMessage}\n        {spinner}\n        {content}\n      </div>\n    );\n  }\n}\n\nconst PlanetView = (prop) => {\n  const { planet } = prop;\n  const { id, name, population, rotationPeriod, diameter } = planet;\n\n  return (\n    <>\n      <img\n        className=\"planet-image\"\n        src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`}\n        alt=\"i'm so sorry\"\n      />\n      <div className=\"planet-information\">\n        <h4>{name}</h4>\n        <ul className=\"list-group list-group-flush\">\n          <li className=\"list-group-item\">\n            <span className=\"term\">Population</span>\n            <span>{population}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Rotation Period</span>\n            <span>{rotationPeriod}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Diameter</span>\n            <span>{diameter}</span>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}