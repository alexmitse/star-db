{"ast":null,"code":"/* eslint-disable no-await-in-loop */\n\n/* eslint-disable class-methods-use-this */\nexport default class SwapiService {\n  constructor() {\n    this.apiBase = 'https://swapi.co/api';\n\n    this.extractId = item => {\n      const idRegExp = /\\/([0-9]*)\\/$/;\n      return item.url.match(idRegExp)[1];\n    };\n\n    this.extractItem = item => {\n      const idRegExp = /\\/([0-9]*)\\/$/;\n      return item.match(idRegExp)[1];\n    };\n\n    this.transformPlanet = planet => {\n      return {\n        id: this.extractId(planet),\n        lable: 'planets',\n        name: planet.name,\n        population: planet.population,\n        rotationPeriod: planet.rotation_period,\n        diameter: planet.diameter\n      };\n    };\n\n    this.transformStarship = starship => {\n      return {\n        id: this.extractId(starship),\n        lable: 'starships',\n        name: starship.name,\n        model: starship.model,\n        manufacturer: starship.manufacturer,\n        costInCredits: starship.cost_in_credits,\n        length: starship.length,\n        crew: starship.crew,\n        passengers: starship.passengers,\n        cargoCapacity: starship.cargo_capacity\n      };\n    };\n\n    this.transformPerson = person => {\n      return {\n        id: this.extractId(person),\n        lable: 'people',\n        name: person.name,\n        gender: person.gender,\n        birthYear: person.birth_year,\n        eyeColor: person.eye_color,\n        homeworld: this.extractItem(person.homeworld),\n        films: person.films.map(this.extractItem),\n        species: person.species.map(this.extractItem),\n        vehicles: person.vehicles.map(this.extractItem),\n        starships: person.starships.map(this.extractItem)\n      };\n    };\n\n    this.transformFilm = film => {\n      return {\n        id: this.extractId(film),\n        lable: 'films',\n        name: film.title,\n        episodeId: film.episode_id,\n        openingCrawl: film.opening_crawl,\n        director: film.director\n      };\n    };\n\n    this.transformSpecies = species => {\n      return {\n        id: this.extractId(species),\n        lable: 'species',\n        name: species.name,\n        classification: species.classification,\n        designation: species.designation,\n        averageHeight: species.average_height\n      };\n    };\n\n    this.transformVehicles = vehicles => {\n      return {\n        id: this.extractId(vehicles),\n        lable: 'vehicles',\n        name: vehicles.name,\n        model: vehicles.model,\n        manufacturer: vehicles.manufacturer,\n        costInCredits: vehicles.cost_in_credits\n      };\n    };\n  }\n\n  async getRequest(url) {\n    const res = await fetch(`${url}`);\n    const resJson = await res.json();\n    return resJson;\n  }\n\n  async getResource(url) {\n    const res = await fetch(`${this.apiBase}${url}`);\n\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url} , received ${res.status}`);\n    }\n\n    const resJson = await res.json();\n    return resJson;\n  }\n\n  async getAllPeople(number, filter) {\n    const res = await fetch(`http://localhost:3000/people?page=3`);\n    const resJson = await res.json();\n    console.log(resJson); // let res = {};\n    // if (filter) res = await this.getResource(`${filter}`);\n    // else res = await this.getResource(`/people/?page=${number}`);\n    // return [res.results.map(this.transformPerson), res.count];\n  }\n\n  async getPerson(id) {\n    const person = await this.getResource(`/people/${id}/`);\n    return this.transformPerson(person);\n  }\n\n  async getAllPlanets(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/planets/?page=${number}`);\n    return [res.results.map(this.transformPlanet), res.count];\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this.transformPlanet(planet);\n  }\n\n  async getAllStarships(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/starships/?page=${number}`);\n    return [res.results.map(this.transformStarship), res.count];\n  }\n\n  async getStarship(id) {\n    const starship = await this.getResource(`/starships/${id}`);\n    return this.transformStarship(starship);\n  }\n\n  async getAllFilms(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/films/?page=${number}`);\n    return [res.results.map(this.transformFilm), res.count];\n  }\n\n  async getFilm(id) {\n    const film = await this.getResource(`/films/${id}`);\n    return this.transformFilm(film);\n  }\n\n  async getAllSpecies(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/species/?page=${number}`);\n    return [res.results.map(this.transformSpecies), res.count];\n  }\n\n  async getSpecies(id) {\n    const species = await this.getResource(`/species/${id}`);\n    return this.transformSpecies(species);\n  }\n\n  async getAllVehicles(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);else res = await this.getResource(`/vehicles/?page=${number}`);\n    return [res.results.map(this.transformSpecies), res.count];\n  }\n\n  async getVehicles(id) {\n    const vehicles = await this.getResource(`/vehicles/${id}`);\n    return this.transformVehicles(vehicles);\n  }\n\n  async getElement(str) {\n    let number = 0;\n    let resPeople = {};\n    let resPlanets = {};\n    let resStarships = {};\n    let resVehicles = {};\n    let resSpecies = {};\n    let resFilms = {};\n\n    do {\n      number += 1;\n      resPeople = await this.getResource(`/people?page=${number}&search=${str}`);\n      resPlanets = await this.getResource(`/planets?page=${number}&search=${str}`);\n      resStarships = await this.getResource(`/starships?page=${number}&search=${str}`);\n      resVehicles = await this.getResource(`/vehicles?page=${number}&search=${str}`);\n      resSpecies = await this.getResource(`/species?page=${number}&search=${str}`);\n      resFilms = await this.getResource(`/films?page=${number}&search=${str}`);\n    } while (resPeople.next); // сделать while для некст пэйдж\n\n\n    return [[...resPeople.results.map(this.transformPerson), // ...resPeopleNext.results.map(this.transformPerson),\n    ...resPlanets.results.map(this.transformPlanet), ...resStarships.results.map(this.transformStarship), ...resVehicles.results.map(this.transformVehicles), ...resSpecies.results.map(this.transformSpecies), ...resFilms.results.map(this.transformFilm)]];\n  }\n\n}","map":{"version":3,"sources":["/home/amitsevich/STAR-DB/star-db/src/services/swapi-service.js"],"names":["SwapiService","apiBase","extractId","item","idRegExp","url","match","extractItem","transformPlanet","planet","id","lable","name","population","rotationPeriod","rotation_period","diameter","transformStarship","starship","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","transformPerson","person","gender","birthYear","birth_year","eyeColor","eye_color","homeworld","films","map","species","vehicles","starships","transformFilm","film","title","episodeId","episode_id","openingCrawl","opening_crawl","director","transformSpecies","classification","designation","averageHeight","average_height","transformVehicles","getRequest","res","fetch","resJson","json","getResource","ok","Error","status","getAllPeople","number","filter","console","log","getPerson","getAllPlanets","results","count","getPlanet","getAllStarships","getStarship","getAllFilms","getFilm","getAllSpecies","getSpecies","getAllVehicles","getVehicles","getElement","str","resPeople","resPlanets","resStarships","resVehicles","resSpecies","resFilms","next"],"mappings":"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","sourcesContent":["/* eslint-disable no-await-in-loop */\n/* eslint-disable class-methods-use-this */\nexport default class SwapiService {\n  apiBase = 'https://swapi.co/api';\n\n  async getRequest(url) {\n    const res = await fetch(`${url}`);\n    const resJson = await res.json();\n    return resJson;\n  }\n\n  async getResource(url) {\n    const res = await fetch(`${this.apiBase}${url}`);\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url} , received ${res.status}`);\n    }\n    const resJson = await res.json();\n    return resJson;\n  }\n\n  async getAllPeople(number, filter) {\n    const res = await fetch(`http://localhost:3000/people?page=3`);\n    const resJson = await res.json();\n    console.log(resJson);\n    // let res = {};\n    // if (filter) res = await this.getResource(`${filter}`);\n    // else res = await this.getResource(`/people/?page=${number}`);\n    // return [res.results.map(this.transformPerson), res.count];\n  }\n\n  async getPerson(id) {\n    const person = await this.getResource(`/people/${id}/`);\n    return this.transformPerson(person);\n  }\n\n  async getAllPlanets(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/planets/?page=${number}`);\n    return [res.results.map(this.transformPlanet), res.count];\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this.transformPlanet(planet);\n  }\n\n  async getAllStarships(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/starships/?page=${number}`);\n    return [res.results.map(this.transformStarship), res.count];\n  }\n\n  async getStarship(id) {\n    const starship = await this.getResource(`/starships/${id}`);\n    return this.transformStarship(starship);\n  }\n\n  async getAllFilms(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/films/?page=${number}`);\n    return [res.results.map(this.transformFilm), res.count];\n  }\n\n  async getFilm(id) {\n    const film = await this.getResource(`/films/${id}`);\n    return this.transformFilm(film);\n  }\n\n  async getAllSpecies(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/species/?page=${number}`);\n    return [res.results.map(this.transformSpecies), res.count];\n  }\n\n  async getSpecies(id) {\n    const species = await this.getResource(`/species/${id}`);\n    return this.transformSpecies(species);\n  }\n\n  async getAllVehicles(number, filter) {\n    let res = {};\n    if (filter) res = await this.getResource(`${filter}`);\n    else res = await this.getResource(`/vehicles/?page=${number}`);\n    return [res.results.map(this.transformSpecies), res.count];\n  }\n\n  async getVehicles(id) {\n    const vehicles = await this.getResource(`/vehicles/${id}`);\n    return this.transformVehicles(vehicles);\n  }\n\n  async getElement(str) {\n    let number = 0;\n    let resPeople = {};\n    let resPlanets = {};\n    let resStarships = {};\n    let resVehicles = {};\n    let resSpecies = {};\n    let resFilms = {};\n\n    do {\n      number += 1;\n      resPeople = await this.getResource(\n        `/people?page=${number}&search=${str}`,\n      );\n      resPlanets = await this.getResource(\n        `/planets?page=${number}&search=${str}`,\n      );\n      resStarships = await this.getResource(\n        `/starships?page=${number}&search=${str}`,\n      );\n      resVehicles = await this.getResource(\n        `/vehicles?page=${number}&search=${str}`,\n      );\n      resSpecies = await this.getResource(\n        `/species?page=${number}&search=${str}`,\n      );\n      resFilms = await this.getResource(`/films?page=${number}&search=${str}`);\n    } while (resPeople.next);\n    // сделать while для некст пэйдж\n\n    return [\n      [\n        ...resPeople.results.map(this.transformPerson),\n        // ...resPeopleNext.results.map(this.transformPerson),\n        ...resPlanets.results.map(this.transformPlanet),\n        ...resStarships.results.map(this.transformStarship),\n        ...resVehicles.results.map(this.transformVehicles),\n        ...resSpecies.results.map(this.transformSpecies),\n        ...resFilms.results.map(this.transformFilm),\n      ],\n    ];\n  }\n\n  extractId = (item) => {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.url.match(idRegExp)[1];\n  };\n\n  extractItem = (item) => {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.match(idRegExp)[1];\n  };\n\n  transformPlanet = (planet) => {\n    return {\n      id: this.extractId(planet),\n      lable: 'planets',\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter,\n    };\n  };\n\n  transformStarship = (starship) => {\n    return {\n      id: this.extractId(starship),\n      lable: 'starships',\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.cost_in_credits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargo_capacity,\n    };\n  };\n\n  transformPerson = (person) => {\n    return {\n      id: this.extractId(person),\n      lable: 'people',\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birth_year,\n      eyeColor: person.eye_color,\n      homeworld: this.extractItem(person.homeworld),\n      films: person.films.map(this.extractItem),\n      species: person.species.map(this.extractItem),\n      vehicles: person.vehicles.map(this.extractItem),\n      starships: person.starships.map(this.extractItem),\n    };\n  };\n\n  transformFilm = (film) => {\n    return {\n      id: this.extractId(film),\n      lable: 'films',\n      name: film.title,\n      episodeId: film.episode_id,\n      openingCrawl: film.opening_crawl,\n      director: film.director,\n    };\n  };\n\n  transformSpecies = (species) => {\n    return {\n      id: this.extractId(species),\n      lable: 'species',\n      name: species.name,\n      classification: species.classification,\n      designation: species.designation,\n      averageHeight: species.average_height,\n    };\n  };\n\n  transformVehicles = (vehicles) => {\n    return {\n      id: this.extractId(vehicles),\n      lable: 'vehicles',\n      name: vehicles.name,\n      model: vehicles.model,\n      manufacturer: vehicles.manufacturer,\n      costInCredits: vehicles.cost_in_credits,\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}